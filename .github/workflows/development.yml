name: development

on:
  push:
    branches:
      - main

jobs:
  versioning:
    runs-on: ubuntu-latest
    outputs:
      published: ${{ steps.changeset.outputs.published }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.REPOSITORY_PAT }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Create Version and Generate Changelog
        id: changeset
        run: |
          npx changeset version
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add .
          git commit -m "chore: bump version using changesets" || echo "No changes to commit"
          git push origin main

      - name: Create Git Tag
        run: |
          VERSION=$(node -p "require('./package.json').version")
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "Tag v$VERSION already exists, skipping..."
          else
            git tag "v$VERSION"
            git push origin "v$VERSION"
          fi

  setup:
    runs-on: ubuntu-latest
    needs: versioning
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: 'npm'

      - name: Cache Node Modules
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: Install Dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: npm ci

  testing:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Restore Cached Node Modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: TypeScript Check
        run: npx tsc --noEmit

      - name: Run Unit Tests
        run: npm run test

  build-app:
    runs-on: ubuntu-latest
    needs: [testing]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Restore Cached Node Modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: Deploy App to Netlify
        run: |
          VERSION=$(node -p "require('./package.json').version")
          npx netlify-cli deploy --build --prod --message "Deploy App v$VERSION"
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_APP_SITE_ID }}
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}

  build-docs:
    runs-on: ubuntu-latest
    needs: [testing]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Restore Cached Node Modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: Build Storybook Docs
        run: npm run build-storybook-docs

      - name: Deploy Storybook Docs to Netlify
        run: |
          VERSION=$(node -p "require('./package.json').version")
          npx netlify-cli deploy --prod --dir=storybook-static --message "Deploy Storybook Docs v$VERSION"
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_STORYBOOK_SITE_ID }}
